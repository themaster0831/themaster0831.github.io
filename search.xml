<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pwn环境搭建</title>
      <link href="/2024/11/18/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/11/18/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/j284886202/article/details/134931709">本文参考</a>：<a href="https://blog.csdn.net/j284886202/article/details/134931709">★pwn 22.04环境搭建保姆级教程★_pwn环境搭建-CSDN博客</a></p><hr><p>一、系统环境</p><p>​1.VM虚拟机</p><p>​我去VM官网看了看，emmm，看了半天愣是没看出来该怎么下载。。。</p><p>对于VMware这个软件的安装直接参考这篇文章吧，<a href="https://blog.csdn.net/weixin_52799373/article/details/124324077?ops_request_misc=%257B%2522request%255Fid%2522%253A%25224EFDDA87-6EB8-4C1C-88AC-39D930DEF2CD%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=4EFDDA87-6EB8-4C1C-88AC-39D930DEF2CD&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124324077-null-null.142%5Ev100%5Epc_search_result_base5&utm_term=vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">VMware虚拟机安装Linux教程(超详细)</a></p><p>​2.配置Ubuntu映像</p><p>​2.1 Ubuntu官网</p><p>​<a href="https://ubuntu.com/download/desktop">Ubuntu</a></p><p>![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;图片&#x2F;Screenshots&#x2F;屏幕截图 2024-11-18 170343.png)</p><p>选择一个你想要的版本，直接下载。</p><p>![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;图片&#x2F;Screenshots&#x2F;屏幕截图 2024-11-18 171013.png)</p><p>然后会自动跳转到这个界面，如果没有下载，点击“download now”，下载。</p><p>​2.2 创建虚拟机</p><p>​点击 + 号创建新的虚拟机</p><p>![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;图片&#x2F;Screenshots&#x2F;屏幕截图 2024-11-18 171512.png)</p><p>​</p><p>二、PWN工具安装</p><p>三、Linux系统美化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2024/11/17/23-pwn-themaster-%E7%AC%AC%E4%BA%8C%E3%80%81%E4%B8%89%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/11/17/23-pwn-themaster-%E7%AC%AC%E4%BA%8C%E3%80%81%E4%B8%89%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.lanqiao.cn/courses/1">参考蓝桥杯官网教程</a></p><p>Linux终端</p><p>在使用LInux时，我们并不是直接与底层系统交互的，而是通过一个名为“Shell”的中间程序来完成的。除此以外，Linux系统还提供了一个模拟终端的程序“Terminal”（终端模拟器）。</p><p>终端本质上是对应着Linux上的&#x2F;dev&#x2F;tty设备，Linux的多用户登录就是通过不同的&#x2F;dev&#x2F;tty设备来完成的。Linux系统默认提供了6个纯命令行界面的“terminal”来让用户登录，通过<code>Ctrl + Alt + F1 ~ F6</code>来切换。如果想回到图形界面可以按下<code>Ctel + Alt + F7</code>。</p><h4 id="Shell-壳"><a href="#Shell-壳" class="headerlink" title="Shell(壳)"></a>Shell(壳)</h4><p>“壳”–“核”  ~~  “Shell”–“UNIX&#x2F;LInux内核”。</p><p><font style="color:#000000;background-color:#D9EAFC;">Shell是</font>指“提供给使用者使用界面”的<font style="background-color:#D9EAFC;">命令解释器</font>。（之所以被称作是Shell是因为它隐藏了操作系统的底层细节）</p><h4 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h4><h5 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h5><table><thead><tr><th align="center"><font style="color:#DF2A3F;">Ctrl + c</font></th><th align="center">强行终止当前程序</th><th></th></tr></thead><tbody><tr><td align="center"><font style="color:#DF2A3F;">Ctrl + d</font></td><td align="center">键盘输入结束或退出终端</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Ctrl + s</font></td><td align="center">暂停当前程序，暂停后按任意键恢复运行</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Ctrl + z</font></td><td align="center">将当前程序放到后台运行，恢复到前台的为命令<font style="color:#DF2A3F;">fg</font></td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Ctrl + a</font></td><td align="center">将光标移至行头，相当于<font style="color:#DF2A3F;">Home</font>键</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Ctrl + e</font></td><td align="center">将光标移至行末，相当于<font style="color:#DF2A3F;">End</font>键</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Ctrl + k</font></td><td align="center">删除从光标所在位置到行末</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Alt + Backspace</font></td><td align="center">向前删除一个单词</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Shift + PgUp</font></td><td align="center">将终端显示向上滚动</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">Shift + PgDn</font></td><td align="center">将终端显示向下滚动</td><td></td></tr></tbody></table><h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h5><p>通配符主要有星号（*）和问号（？），其<font style="background-color:#D9EAFC;">用途是</font>为了<font style="background-color:#D9EAFC;">对字符串进行模糊匹配</font>。</p><p><font style="color:#DF2A3F;">**</font><u>在终端里面输入的通配符由Shell来处理，并不是由所涉及的命令语句来处理的，它只会出现在命令的“参数里”。</u></p><p>当Shell在“参数值”中遇到通配符时，Shell会将其当做路径或文件名在磁盘上搜寻可能得匹配；如果符合要求的匹配存在，则进行代换（路径拓展）；否则将该通配符作为一个普通的字符传递给“命令”。在通配符被处理后，Shell会先完成该命令的重组，然后继续处理重组后的命令，直至执行该命令。</p><p>常见通配符</p><table><thead><tr><th align="center"><font style="color:#DF2A3F;">*</font></th><th align="center">匹配 0 或多个字符<font style="color:#DF2A3F;">（也可以把 * 理解成“全部”的意思</font>）</th><th></th></tr></thead><tbody><tr><td align="center"><font style="color:#DF2A3F;">？</font></td><td align="center">匹配任意一个字符</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">[list]</font></td><td align="center">匹配 list中的任意单一字符</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">[^list]</font></td><td align="center">匹配 除list中的任意单一字符以外的字符</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">[c1-c2]</font></td><td align="center">匹配c1-c2中的任意单一字符。如：[0-9][a-z]</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">{string1,string2,….}</font></td><td align="center">匹配string1或string2其一字符串</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">{c1..c2}</font></td><td align="center">匹配c1-c2中全部字符 如下文例2中{1..10}</td><td></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> demo01.cpp demo02.txt</span><br><span class="line"><span class="built_in">ls</span> *.cpp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731845588952-b34abfe1-d03c-4f54-b25d-6bccd040c6bd.png"></p><p>例2：同时创建多个文件，可使用<code>&#123;1..n&#125;</code>来同时创建n个文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> love_&#123;1..10&#125;.txt</span><br><span class="line"><span class="built_in">ls</span> *.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731845811661-2fb760f3-45b3-40be-aebe-905ed13c9be7.png"></p><h5 id="man命令（Manual-pages的缩写）"><a href="#man命令（Manual-pages的缩写）" class="headerlink" title="man命令（Manual pages的缩写）"></a>man命令（Manual pages的缩写）</h5><p>3.3.1Manual pages 是 UNIX 或类 UNIX操作系统中在线软件文档的一种普遍形式，内容包括计算机程序（库和系统调用等）、正式的标准和惯例，甚至是抽象的概念。</p><p>3.3.2使用格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man &lt;command_name&gt;</span><br></pre></td></tr></table></figure><p>手册通常被分为8个分区：</p><table><thead><tr><th align="center">1</th><th align="center">一般命令</th><th></th></tr></thead><tbody><tr><td align="center">2</td><td align="center">系统调用</td><td></td></tr><tr><td align="center">3</td><td align="center">库函数，（包含C标准函数库）</td><td></td></tr><tr><td align="center">4</td><td align="center">特殊文件（通常是&#x2F;dev 中的设备）和驱动程序</td><td></td></tr><tr><td align="center">5</td><td align="center">文件格式和约定</td><td></td></tr><tr><td align="center">6</td><td align="center">游戏和屏保</td><td></td></tr><tr><td align="center">7</td><td align="center">杂项</td><td></td></tr><tr><td align="center">8</td><td align="center">系统管理命令和守护进程</td><td></td></tr></tbody></table><h4 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h4><h5 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h5><p><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;who am i&lt;/font&gt;</code><font style="color:#DF2A3F;">:用来查看打开当前伪终端的用户的用户名。（记录登录shell时的用户，你以什么用户登录就显示什么）</font></p><p><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;whoami&lt;/font&gt;</code><font style="color:#DF2A3F;">：查看当前登录的用户的用户名（当前系统的有效用户）</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731847508663-8867349f-a533-42b1-8458-fb0c62a25649.png"></p><p>第一列便是相应的用户名了。而第二列的<code>pst/0</code>中<code>pst</code>表示伪终端、后面的数字便是伪终端的序号。使用&#x2F;dev&#x2F;tty7时每打开一个终端，就会产生一个伪终端。（说白了就是，在桌面右击打开的终端，都是伪终端，每次打开，都是在创建新的伪终端。）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731847863755-06f86696-99ee-40d4-82cb-b1bb0510b1b7.png"></p><p>who命令的其它常用参数</p><table><thead><tr><th align="center">参数</th><th align="center">说明</th><th></th></tr></thead><tbody><tr><td align="center"><font style="color:#DF2A3F;">-a（all）</font></td><td align="center">打印能打印的全部</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">-d(died)</font></td><td align="center">打印死掉的进程</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">-m</font></td><td align="center">同<code>am i</code>,<code>mom likes</code></td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">-q</font></td><td align="center">打印当前登录用户数及用户名</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">-u</font></td><td align="center">打印当前登录用户登录信息</td><td></td></tr><tr><td align="center"><font style="color:#DF2A3F;">-r(rank)</font></td><td align="center">打印运行等级</td><td></td></tr></tbody></table><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><h6 id="在Linux系统中，root账户拥有整个系统至高无上的权限。"><a href="#在Linux系统中，root账户拥有整个系统至高无上的权限。" class="headerlink" title="在Linux系统中，root账户拥有整个系统至高无上的权限。"></a>在Linux系统中，<font style="color:#DF2A3F;">root</font>账户拥有整个系统至高无上的权限。</h6><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731848572958-697021b1-152f-4dd9-835b-8b2aec861ec4.png"></p><h6 id="sudo命令（Super-User-Do-）"><a href="#sudo命令（Super-User-Do-）" class="headerlink" title="sudo命令（Super User Do ）"></a>sudo命令（Super User Do ）</h6><p><code>&lt;u&gt;su &lt;user&gt;&lt;/u&gt;</code><u>:切换到用户user，执行时需要输入目标用户的密码</u></p><p><code>&lt;u&gt;su - &lt;user&gt;&lt;/u&gt;</code><u>:切换到目标用户，但是同时用户的环境变量和工作目录也会跟着改变成目标用户所对应的。</u></p><p><code>&lt;u&gt;sudo &lt;cmd&gt;&lt;/u&gt;</code><u>:可以以特权级别运行cmd命令，需要当前用户属于sudo组，且输入当前账户的密码。</u></p><p>例：1.创建一个叫 lilei的用户，键入以下指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> adduser lilei//这个命令不仅可以添加用户到系统，</span><br><span class="line">                      //同时也默认 为新用户在/home目录下创建一个工作目录</span><br></pre></td></tr></table></figure><p>然后就是给 lilei 用户设置密码。然后就可以一路 enter 键直到创建用户结束。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731849347003-5cd1ca10-b573-4173-b76e-76c359ab5e1c.png"></p><p>依次键入以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su -l lilei//切换到 lilei 用户</span><br><span class="line"><span class="built_in">who</span> am i//查看登录shell用</span><br><span class="line"><span class="built_in">whoami</span>//查看当前用户</span><br><span class="line"><span class="built_in">pwd</span>//查看工作路径（Print Working Directory）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731850327902-5fbe0886-d8fc-4a68-9229-3f112fce3f33.png"></p><p>(这里可以很明显地看出来<code>who am i</code>和<code>whoami</code>的区别)</p><p>2.用<code>exit</code>命令或快捷键<code>Ctrl + D</code>退出当前用户</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731850461785-db7b25e4-ac96-44f2-98a5-70a10c9aa890.png"></p><h5 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h5><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>Linux里面，每个用户都有一个归属（用户组），简单地说就是用户组是一组用户的集合。一个用户可以属于多个用户组。</p><h6 id="查看当前用户归属于那个用户组"><a href="#查看当前用户归属于那个用户组" class="headerlink" title="查看当前用户归属于那个用户组"></a>查看当前用户归属于那个用户组</h6><p>法一：使用 groups 命令查看<code>groups &lt;user&gt;</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">groups</span> lilei</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731851111034-ddb44676-43fa-45ee-bbad-ddb0bbd853ce.png"></p><p><font style="color:#DF2A3F;">冒号之前表示用户，冒号之后便是该用户所属用户组。每次新建用户，如果不指定用户组，系统会自动创建一个与用户名相同的用户组。</font></p><p>法二：查看&#x2F;etc&#x2F;group文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/group  | <span class="built_in">sort</span>// | <span class="built_in">sort</span>  表示将读取的文本进行一个字典排序再输出。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731851473539-82d88bc3-fd0f-4f03-a04d-7697be3bd5e5.png"></p><p>但是，这样得到的内容太杂乱，不方便找到目标用户组。</p><p>可以使用 <font style="color:#DF2A3F;">grep </font>命令，过滤掉不需要的结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/group | grep -E <span class="string">&quot;lilei&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731851593771-ec406da0-0657-4eb9-ae0a-6c3635006880.png"></p><p>补：&#x2F;etc&#x2F;group文件格式说明</p><p>&#x2F;etc&#x2F;group 的内容包括 用户组（Group）、用户组口令 、GID（组ID）、及该用户组所包含的用户（User），每个用户组一条记录，格式如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">group_name : password : GID : user_list</span><br></pre></td></tr></table></figure><h6 id="将其他用户添加到-sudo-用户组"><a href="#将其他用户添加到-sudo-用户组" class="headerlink" title="将其他用户添加到 sudo 用户组"></a>将其他用户添加到 sudo 用户组</h6><p>默认情况下，新创建的用户是不具有 root 权限的，也不再sudo用户组，可以让其加入sudo用户组从而获得相应权限。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731852019780-a8815e76-2ced-44db-bebf-189b6309d59b.png"></p><p>使用 usermod 命令为用户添加用户组，<u>使用该命令必须具有root权限</u></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731852278068-51add412-c7fb-41b9-9209-64edc47e21a0.png"></p><h5 id="删除用户和用户组"><a href="#删除用户和用户组" class="headerlink" title="删除用户和用户组"></a>删除用户和用户组</h5><h6 id="使用deluser命令删除用户"><a href="#使用deluser命令删除用户" class="headerlink" title="使用deluser命令删除用户"></a>使用<code>deluser</code>命令删除用户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> deluser &lt;user_name&gt; --remove-home</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731852510325-cdc64c1b-1fca-45b8-824d-1c02e800001d.png"></p><p>使用<code>--remove-home</code>参数在删除用户时会一并将该用户的工作目录删除。如果不使用那么系统会自动在 &#x2F;home 目录为该用户保留工作目录</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1731852660651-b6636cb7-6dce-496e-9952-555822c51918.png"></p><h6 id="使用groupdel命令删除用户组。必须确保群组中不包含任何用户，才能将群组删除。"><a href="#使用groupdel命令删除用户组。必须确保群组中不包含任何用户，才能将群组删除。" class="headerlink" title="使用groupdel命令删除用户组。必须确保群组中不包含任何用户，才能将群组删除。"></a>使用<code>groupdel</code>命令删除用户组。必须确保群组中不包含任何用户，才能将群组删除。</h6>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人Blog搭建</title>
      <link href="/2024/11/01/23-pwn-themaster-%E4%B8%AA%E4%BA%BABlog%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/11/01/23-pwn-themaster-%E4%B8%AA%E4%BA%BABlog%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<hr><p>本次搭建过程，参考此B站视频</p><p><a href="about:blank">链接</a></p><h3 id="一、Nodejs-与-Git-下载与安装"><a href="#一、Nodejs-与-Git-下载与安装" class="headerlink" title="一、Nodejs 与 Git 下载与安装"></a>一、Nodejs 与 Git 下载与安装</h3><p><strong>1.Nodejs下载</strong></p><p>官网链接：<a href="https://nodejs.org/en/">nodejs官网</a> </p><p>（如果不想安装在自己的C盘，可以参考这篇修改nodejs缓存路径的文章：<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">参考文章</a>）</p><p><strong>2.Git下载</strong></p><p>官网链接：<a href="https://git-scm.com/downloads">Git官网</a></p><p>一路默认点到底就行了。</p><p><strong><u><font style="color:#000000;">3.测试是否都安装成功</font></u></strong></p><p><font style="color:#000000;">管理员运行cmd，输入以下指令</font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v （这个是node附带的）</span><br><span class="line">git -v</span><br></pre></td></tr></table></figure><p>如果见到以下输出，那么说明安装没有问题。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730377002063-dce00e00-d44a-4c6e-859b-08674d2d0fcc.png"></p><p>4.下载hexo</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="二、仓库的搭建"><a href="#二、仓库的搭建" class="headerlink" title="二、仓库的搭建"></a>二、仓库的搭建</h3><p>成功下载好工具后，接下来便可以着手搭建GitHub存储静态页面的仓库</p><p><strong>1.注册&#x2F;登录</strong><a href="https://github.com/">GitHub</a></p><p>点击Create a new repository进入新建仓库页面</p><p>仓库名输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure><p>勾选Public</p><p>勾选Add a README file</p><p>点击Create创建</p><p><strong>2.生成SSH Keys</strong></p><p>进入任意文件夹，右键空白处然后点击Git bash here，输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730379132240-7a966b49-70d4-42b3-b850-af41e2acda47.png"></p><p>然后进入C:&#x2F;用户&#x2F;Lenovo&#x2F;.ssh（我电脑上的路径是这样的，在生成密钥的时候，git bash 列表会有密钥路径的，可自行查找）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730433544124-a5f62f84-5537-48d0-b065-73a07ae00bfa.png"></p><p>用记事本打开id_rsa.pub，复制里面的全部代码</p><p>在GitHub中进入用户设置，</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730379169481-c28912f2-40fd-4586-bb30-adc65839358a.png"></p><p>找到SSH Keys，新建SSH Keys，将刚才的代码粘贴到下方框框里，点击创建。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730379373279-83bd5c84-3757-4358-abce-038ce8804341.png"></p><p>最后测试是否成功</p><p>在gitbash中输入</p><p><code>ssh -T git@github.com</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730386303008-2d733e6b-4c1d-4088-9fca-75e7d2af2c5d.png"></p><h3 id="三、本地生成博客内容"><a href="#三、本地生成博客内容" class="headerlink" title="三、本地生成博客内容"></a>三、本地生成博客内容</h3><p>1.新建Blog文件夹，进入Blog文件夹，右击空白处然后点击Git bash Here，依次输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>:::info<br><strong>第一步如果出现：command not find，试着输入npx hexo init</strong></p><p>:::</p><p>一切没问题的话，就可以复制生成的链接进入浏览器看到我们生成的本地服务器了。</p><p>回到命令行，输入Ctrl + c 结束进程。</p><h3 id="四、上线Blog"><a href="#四、上线Blog" class="headerlink" title="四、上线Blog"></a>四、上线Blog</h3><p>1.进入Blog根目录文件，打开_config.yml文件</p><p>拉到最下面将deploy：后面的全删掉，复制粘贴以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repository: </span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure><p>:::color4<br>一定要注意缩进格式，每一行前都有两个空格，每个冒号后也都有一个空格！！！</p><p>:::</p><pre><code>2.前往github之前生成的仓库页面，点code，复制https链接，将其复制到`repository: `后面</code></pre><p> 然后保存退出，<img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730387181458-6c72989e-4d47-486c-a817-89bd61e876dd.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40792144/1730387201708-3f8208a8-1204-4db2-88c2-135262f3a419.png"></p><p>3.回到Blog文件夹，git bash，安装自动部署发布工具</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g(生成)</span><br><span class="line">hexo d(上传)</span><br></pre></td></tr></table></figure><p>:::color1<br>如果是第一次使用git的话需要配置</p><p>1.<code>git config --global user.email &quot;你的邮箱&quot;</code></p><p>2.<code>git config --global user.name &quot;你的名字&quot;</code></p><p>配置完后，再<code>hexo g</code>上传</p><p>（参考文章说会跳出来github登录界面，但不知道为什么我配置的时候没有跳出登录界面，但影响不大）</p><p>:::</p><p>4.这样，我们就成功把本地内容上传到github了，上传成功以后就算搭建好了！</p><p>可以自行前往对应网址查看(网址：<code>用户名.github.io</code>）</p><h3 id="五：网站资料的修改"><a href="#五：网站资料的修改" class="headerlink" title="五：网站资料的修改"></a>五：网站资料的修改</h3><p>我们的博克标题默认是hexo，整个页面是初始默认的。</p><p>我们只需打开Blog根目录下的_config.yml文件，</p><p>将#Site下面按自己的需求填上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Site</span><br><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">keywords: 关键词</span><br><span class="line">author: 站主</span><br><span class="line">language: 语言（可以填写zh-CN）</span><br><span class="line">timezone: 时区（可以填写Asia/Shanghai）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后保存，打开git bash 生成、上传。</p><h3 id="Congratulations！！"><a href="#Congratulations！！" class="headerlink" title="Congratulations！！!"></a><font style="color:#ED740C;">Congratulations！！!</font></h3><h3 id="至此，我们已经成功搭建好基本的博客了，剩下的就是对博客的优化和个性化了"><a href="#至此，我们已经成功搭建好基本的博客了，剩下的就是对博客的优化和个性化了" class="headerlink" title="至此，我们已经成功搭建好基本的博客了，剩下的就是对博客的优化和个性化了:)"></a><font style="color:#ED740C;">至此，我们已经成功搭建好基本的博客了，剩下的就是对博客的优化和个性化了:)</font></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/31/hello-world/"/>
      <url>/2024/10/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
